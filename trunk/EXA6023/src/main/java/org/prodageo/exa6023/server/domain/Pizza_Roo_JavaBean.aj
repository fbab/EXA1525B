// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.prodageo.exa6023.server.domain;

import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import java.lang.Float;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Transient;
import org.prodageo.exa6023.server.domain.Base;
import org.prodageo.exa6023.server.domain.Topping;

privileged aspect Pizza_Roo_JavaBean {
    
    declare @field: * Pizza.toppings: -@ManyToMany;
    
    declare @field: * Pizza.toppings: @Transient;
    
    declare @field: * Pizza.base: -@ManyToOne;
    
    declare @field: * Pizza.base: @Transient;
    
    private Set<Key> Pizza.toppingsKeys = new HashSet<Key>();
    
    private Long Pizza.baseId;
    
    public String Pizza.getName() {
        return this.name;
    }
    
    public void Pizza.setName(String name) {
        this.name = name;
    }
    
    public Float Pizza.getPrice() {
        return this.price;
    }
    
    public void Pizza.setPrice(Float price) {
        this.price = price;
    }
    
    public Set<Topping> Pizza.getToppings() {
        Set<org.prodageo.exa6023.server.domain.Topping> localToppings = new HashSet<org.prodageo.exa6023.server.domain.Topping>();
        for (Key key : toppingsKeys) {
            Topping entity = Topping.findTopping(key.getId());
            if (entity != null) {
                localToppings.add(entity);
            }
        }
        this.toppings = localToppings;
        return localToppings;
    }
    
    public void Pizza.setToppings(Set<Topping> toppings) {
        Set<org.prodageo.exa6023.server.domain.Topping> localToppings = new HashSet<org.prodageo.exa6023.server.domain.Topping>();
        List<Long> longIds = new ArrayList<Long>();
        for (Key key : toppingsKeys) {
            if (!longIds.contains(key.getId())) {
                longIds.add(key.getId());
            }
        }
        for (Topping entity : toppings) {
            if (!longIds.contains(entity.getId())) {
                longIds.add(entity.getId());
                toppingsKeys.add(KeyFactory.createKey(Topping.class.getName(), entity.getId()));
            }
            localToppings.add(entity);
        }
        this.toppings = localToppings;
    }
    
    public Base Pizza.getBase() {
        if (this.baseId != null) {
            if (this.base == null || this.base.getId() != this.baseId) {
                this.base = Base.findBase(this.baseId);
            }
        } else {
            this.base = null;
        }
        return this.base;
    }
    
    public void Pizza.setBase(Base base) {
        if (base != null) {
            if (base.getId () == null) {
                base.persist();
            }
            this.baseId = base.getId();
        } else {
            this.baseId = null;
        }
        this.base = base;
    }
    
}
