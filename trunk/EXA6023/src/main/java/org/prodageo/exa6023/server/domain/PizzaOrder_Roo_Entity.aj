// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.prodageo.exa6023.server.domain;

import java.lang.Integer;
import java.lang.Long;
import java.lang.SuppressWarnings;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.prodageo.exa6023.server.domain.PizzaOrder;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

privileged aspect PizzaOrder_Roo_Entity {
    
    declare @type: PizzaOrder: @Entity;
    
    @PersistenceContext
    transient EntityManager PizzaOrder.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long PizzaOrder.id;
    
    @Version
    @Column(name = "version")
    private Integer PizzaOrder.version;
    
    public Long PizzaOrder.getId() {
        return this.id;
    }
    
    public void PizzaOrder.setId(Long id) {
        this.id = id;
    }
    
    public Integer PizzaOrder.getVersion() {
        return this.version;
    }
    
    public void PizzaOrder.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void PizzaOrder.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void PizzaOrder.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            PizzaOrder attached = PizzaOrder.findPizzaOrder(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void PizzaOrder.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void PizzaOrder.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public PizzaOrder PizzaOrder.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        PizzaOrder merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager PizzaOrder.entityManager() {
        EntityManager em = new PizzaOrder().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    @Transactional
    public static long PizzaOrder.countPizzaOrders() {
        return ((Number) entityManager().createQuery("SELECT COUNT(o) FROM PizzaOrder o").getSingleResult()).longValue();
    }
    
    @SuppressWarnings("unchecked")
    @Transactional
    public static List<PizzaOrder> PizzaOrder.findAllPizzaOrders() {
        return entityManager().createQuery("SELECT o FROM PizzaOrder o").getResultList();
    }
    
    @Transactional
    public static PizzaOrder PizzaOrder.findPizzaOrder(Long id) {
        if (id == null) return null;
        try {
            return (PizzaOrder) entityManager().createQuery("SELECT o FROM PizzaOrder o WHERE o.id = :id").setParameter("id", id).getSingleResult();
        } catch (org.springframework.dao.EmptyResultDataAccessException e) {
            return null;
        } catch (javax.persistence.NoResultException e) {
            return null;
        }
    }
    
    @SuppressWarnings("unchecked")
    @Transactional
    public static List<PizzaOrder> PizzaOrder.findPizzaOrderEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM PizzaOrder o").setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
