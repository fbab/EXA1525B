// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.prodageo.exa6023.server.domain;

import java.lang.Integer;
import java.lang.Long;
import java.lang.SuppressWarnings;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.prodageo.exa6023.server.domain.Pizza;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Pizza_Roo_Entity {
    
    declare @type: Pizza: @Entity;
    
    @PersistenceContext
    transient EntityManager Pizza.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long Pizza.id;
    
    @Version
    @Column(name = "version")
    private Integer Pizza.version;
    
    public Long Pizza.getId() {
        return this.id;
    }
    
    public void Pizza.setId(Long id) {
        this.id = id;
    }
    
    public Integer Pizza.getVersion() {
        return this.version;
    }
    
    public void Pizza.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void Pizza.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Pizza.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Pizza attached = Pizza.findPizza(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Pizza.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Pizza.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Pizza Pizza.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Pizza merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Pizza.entityManager() {
        EntityManager em = new Pizza().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    @Transactional
    public static long Pizza.countPizzas() {
        return ((Number) entityManager().createQuery("SELECT COUNT(o) FROM Pizza o").getSingleResult()).longValue();
    }
    
    @SuppressWarnings("unchecked")
    @Transactional
    public static List<Pizza> Pizza.findAllPizzas() {
        return entityManager().createQuery("SELECT o FROM Pizza o").getResultList();
    }
    
    @Transactional
    public static Pizza Pizza.findPizza(Long id) {
        if (id == null) return null;
        try {
            return (Pizza) entityManager().createQuery("SELECT o FROM Pizza o WHERE o.id = :id").setParameter("id", id).getSingleResult();
        } catch (org.springframework.dao.EmptyResultDataAccessException e) {
            return null;
        } catch (javax.persistence.NoResultException e) {
            return null;
        }
    }
    
    @SuppressWarnings("unchecked")
    @Transactional
    public static List<Pizza> Pizza.findPizzaEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Pizza o").setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
